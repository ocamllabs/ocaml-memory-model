include "cos.cat"

let sb = po
let mo = co
let cacq = Atm & R
let crel = Atm & W

(* release_acquire_fenced_synchronizes_with,
   hypothetical_release_sequence_set,
   release_sequence_set *)


let rs_prime = int | (_ * (R & W))
let rs = mo & rs_prime \ ((mo \ rs_prime) ; mo)
		       
let sw =
 ext &
 ([crel] ; [A & W] ; rs? ; rf ; [R & A] ; [cacq])

(* happens_before,
   inter_thread_happens_before,
   consistent_hb *)
let ithbr = sw | (sw ; sb)
let ithb = (ithbr | (sb ; ithbr))+
let hb = sb | ithb
acyclic hb as Hb


show (hb \ (IW * _)) & ext as hb

(* coherent_memory_use *)
let hbl = hb & loc

irreflexive ((rf^-1)? ; mo ; rf? ; hb) as Coh

(* visible_side_effect_set *)
let vis = (hbl & (W * R)) \ (hbl; [W] ; hbl)

(* consistent_atomic_rf *) 
irreflexive (rf ; hb) as Rf


let scp = ((Atm * Atm) & ((mo | fr | hb))) \ id
acyclic (po | rf) as causality
acyclic scp as Ssimp
show scp
